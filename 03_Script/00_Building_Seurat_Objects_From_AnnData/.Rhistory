ymax <- m+sd(x)
return(c(y=m,ymin=ymin,ymax=ymax))
}
###Markers for scoring of subsets
# getting data from sheets
sheets_names <- openxlsx::getSheetNames(FILE_SIGNATURES_PATH)
read_excel_allsheets <- function(filename, tibble = FALSE) {
sheets <- readxl::excel_sheets(filename)
x <- lapply(sheets, function(X) readxl::read_excel(filename, sheet = X))
if(!tibble) x <- lapply(x, as.data.frame)
names(x) <- sheets
x
}
MONITORED_Markers = read_excel_allsheets(FILE_SIGNATURES_PATH)
MONITORED_Markers = lapply(MONITORED_Markers, FUN=function(x) intersect(unlist(x), rownames(PBMC)))
MONITORED_Markers= lapply(MONITORED_Markers, FUN=function(x) head(x, n=40))
#Add the module scores
for (i in names(MONITORED_Markers)){
PBMC = AddModuleScore(PBMC, features = list(MONITORED_Markers[[i]]), pool= NULL ,name= i , seed=19)
}
#Convert to factors:
PBMC$celltype.l1 = as.factor(PBMC$celltype.l1)
PBMC$celltype.l2 = as.factor(PBMC$celltype.l2)
PBMC$celltype.l3 = as.factor(PBMC$celltype.l3)
# At level 1
PBMC = SetIdent(PBMC,  value= "celltype.l1")
p1 = VlnPlot(PBMC,features = "Crinier_13_hNKGenes_20181", pt.size = 0) & ggtitle("Score 13 NK Genes")
png(file=paste0(OUPUT_FIG_FILE,"/VlnPlot_13NKgenes_OnCD45pos_l1.png"), width = 25, height = 15,  units = "cm", res=600 )
p1
dev.off()
# At level 2
PBMC = SetIdent(PBMC,  value= "celltype.l2")
p2 = VlnPlot(PBMC,features = "Crinier_13_hNKGenes_20181", pt.size = 0) & ggtitle("Score 13 NK Genes")
png(file=paste0(OUPUT_FIG_FILE,"/VlnPlot_13NKgenes_OnCD45pos_l2.png"), width = 30, height = 15,  units = "cm", res=600 )
p2
dev.off()
# At level  3
PBMC = SetIdent(PBMC,  value= "celltype.l3")
p3 = VlnPlot(PBMC,features = "Crinier_13_hNKGenes_20181", pt.size = 0) & ggtitle("Score 13 NK Genes")
png(file=paste0(OUPUT_FIG_FILE,"/VlnPlot_13NKgenes_OnCD45pos_l3.png"), width = 60, height = 15,  units = "cm", res=600 )
p3
dev.off()
# At level 1
PBMC = SetIdent(PBMC,  value= "celltype.l1")
p1 = VlnPlot(PBMC,features = "Crinier_13_hNKGenes_20181", pt.size = 0, sort = "decreasing" ) & ggtitle("Score 13 NK Genes")
png(file=paste0(OUPUT_FIG_FILE,"/VlnPlot_13NKgenes_OnCD45pos_l1.png"), width = 25, height = 15,  units = "cm", res=600 )
p1
dev.off()
#Increasing
p1bis = VlnPlot(PBMC,features = "Crinier_13_hNKGenes_20181", pt.size = 0, sort = "decreasing") & ggtitle("Score 13 NK Genes") & stat_summary(fun.data=data_summary,color="black")
png(file=paste0(OUPUT_FIG_FILE,"/VlnPlot_13NKgenes_OnCD45pos_l1_incr.png"), width = 25, height = 15,  units = "cm", res=600 )
p1bis
dev.off()
# At level 2
PBMC = SetIdent(PBMC,  value= "celltype.l2")
p2 = VlnPlot(PBMC,features = "Crinier_13_hNKGenes_20181", pt.size = 0, sort = "decreasing") & ggtitle("Score 13 NK Genes")
png(file=paste0(OUPUT_FIG_FILE,"/VlnPlot_13NKgenes_OnCD45pos_l2.png"), width = 30, height = 15,  units = "cm", res=600 )
p2
dev.off()
p2bis = VlnPlot(PBMC,features = "Crinier_13_hNKGenes_20181", pt.size = 0, sort= "decreasing") & ggtitle("Score 13 NK Genes") & stat_summary(fun.data=data_summary,color="black")
png(file=paste0(OUPUT_FIG_FILE,"/VlnPlot_13NKgenes_OnCD45pos_l2_incr.png"), width = 30, height = 15,  units = "cm", res=600 )
p2bis
dev.off()
# At level  3
PBMC = SetIdent(PBMC,  value= "celltype.l3")
p3 = VlnPlot(PBMC,features = "Crinier_13_hNKGenes_20181", pt.size = 0,  sort = "decreasing") & ggtitle("Score 13 NK Genes")
png(file=paste0(OUPUT_FIG_FILE,"/VlnPlot_13NKgenes_OnCD45pos_l3.png"), width = 60, height = 15,  units = "cm", res=600 )
p3
dev.off()
p3bis = VlnPlot(PBMC,features = "Crinier_13_hNKGenes_20181", pt.size = 0, sort= "decreasing") & ggtitle("Score 13 NK Genes") & stat_summary(fun.data=data_summary,color="black")
png(file=paste0(OUPUT_FIG_FILE,"/VlnPlot_13NKgenes_OnCD45pos_l3_incr.png"), width = 60, height = 15,  units = "cm", res=600 )
p3bis
dev.off()
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/Meta_NK_V5/03_Script/01_GlobalHeterogeneity/00B_Analysis_Params.R')
PBMC= readRDS("/mnt/DOSI/SUEVLAB/BIOINFO/BIOINFO_PROJECT/Meta_NK5/05_Output/01_GlobalHeterogeneity/Analysis_V2Chem/PBMC_V2_VF1_AllGenes_NewNames.rds")
PBMC  =SetIdent(PBMC, value = "FirstClust")
PBMC= readRDS("/mnt/DOSI/EVLAB/BIOINFO/BIOINFO_PROJECT/Meta_NK5/05_Output/01_GlobalHeterogeneity/Analysis_V2Chem/PBMC_V2_VF1_AllGenes_NewNames.rds")
PBMC  =SetIdent(PBMC, value = "FirstClust")
p1 = DimPlot(PBMC, label=TRUE, order = rev(ORDER_CLUST_LEGEND), cols = palette) + NoAxes()
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/Meta_NK_V5/03_Script/01_GlobalHeterogeneity/00B_Analysis_Params.R')
PBMC@active.ident
PBMC= SetIdent(PBMC, value = "FirstClust")
All_Markers = FindAllMarkers(PBMC , only.pos = FINDMARKERS_ONLYPOS, method= FINDMARKERS_METHOD , min.pct =  FINDMARKERS_MINPCT, logfc.threshold = FINDMARKERS_LOGFC_THR , verbose = TRUE)
write.csv(All_Markers, "/mnt/DOSI/EVLAB/BIOINFO/BIOINFO_PROJECT/Meta_NK5/05_Output/20_Sup_Tables_csv_xlsx/DEG_scRNAseq_NK1ABC_NK2_NK3_NKint.csv", row.names=TRUE)
write_xlsx(All_Markers,"/mnt/DOSI/EVLAB/BIOINFO/BIOINFO_PROJECT/Meta_NK5/05_Output/20_Sup_Tables_csv_xlsx/DEG_scRNAseq_NK1ABC_NK2_NK3_NKint.xlsx")
library(openxlsx)
write_xlsx(All_Markers,"/mnt/DOSI/EVLAB/BIOINFO/BIOINFO_PROJECT/Meta_NK5/05_Output/20_Sup_Tables_csv_xlsx/DEG_scRNAseq_NK1ABC_NK2_NK3_NKint.xlsx")
DimPlot(PBMC)
gc()
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/ILCs_Ontology/03_Script/03_Transcriptionnal_Trajectories/01_DestinyAnalysis/00A_Global_Dependencies.R')
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/ILCs_Ontology/03_Script/03_Transcriptionnal_Trajectories/01_DestinyAnalysis/00A_Global_Dependencies.R')
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/ILCs_Ontology/03_Script/03_Transcriptionnal_Trajectories/01_DestinyAnalysis/00A_Global_Dependencies.R')
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/ILCs_Ontology/03_Script/03_Transcriptionnal_Trajectories/01_DestinyAnalysis/00A_Global_Dependencies.R')
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/ILCs_Ontology/03_Script/03_Transcriptionnal_Trajectories/01_DestinyAnalysis/00B_Analysis_Params.R')
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/ILCs_Ontology/03_Script/03_Transcriptionnal_Trajectories/01_DestinyAnalysis/00B_Analysis_Params.R')
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/ILCs_Ontology/03_Script/03_Transcriptionnal_Trajectories/01_DestinyAnalysis/00C_Def_Functions.R')
#Install Libraries
#Works
#install.packages("sinaplot")
#BiocManager::install("destiny")
#install.packages("rgl")
#install.packages("magick")
#BiocManager::install("genefilter")
#Does not work
#remotes::install_github("Japrin/sscVis")
#devtools::install_github("Japrin/sscVis")
#library(Matrix.utils)
#Loading and preparing the data ###
PBMC = readRDS(paste0(PATH_EXPERIMENT_OUTPUT_RDSFiles, "/FL.rds"))
DimPlot(PBMC)
#Remove APOE+ subset
object= subset(PBMC, idents= SUBSETS_TO_REMOVE , invert = TRUE)
object$seurat_clusters = droplevels(object$seurat_clusters)
object = SetIdent(object, value =  "seurat_clusters")
DimPlot(object)
PBMC = readRDS(paste0(PATH_EXPERIMENT_OUTPUT_RDSFiles, "/FL.rds"))
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/ILCs_Ontology/03_Script/globalParams.R')
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/ILCs_Ontology/03_Script/sampleParams.R')
#Install Libraries
#Works
#install.packages("sinaplot")
#BiocManager::install("destiny")
#install.packages("rgl")
#install.packages("magick")
#BiocManager::install("genefilter")
#Does not work
#remotes::install_github("Japrin/sscVis")
#devtools::install_github("Japrin/sscVis")
#library(Matrix.utils)
#Loading and preparing the data ###
PBMC = readRDS(paste0(PATH_EXPERIMENT_OUTPUT_RDSFiles, "/FL.rds"))
DimPlot(PBMC)
#Remove APOE+ subset
object= subset(PBMC, idents= SUBSETS_TO_REMOVE , invert = TRUE)
object$seurat_clusters = droplevels(object$seurat_clusters)
object = SetIdent(object, value =  "seurat_clusters")
DimPlot(object)
DimPlot(object, cols = col_clust_traj)
col_clust_traj=c(C1_ILCP = "#E41A1C",
"C2_Klrd1+" = "#377EB8",
#C3_LTiP = "#4DAF4A",
C4_EILP = "#984EA3")
DimPlot(object, cols = col_clust_traj)
object = FindVariableFeatures(object)
var.features = VariableFeatures(object)
set.seed(SEED)
#Extract data
log.norm.data=object@assays$RNA@data
log.norm.data.var<-log.norm.data[var.features,]
data<-t(as.matrix(log.norm.data.var))
#Extract Metadata
metadata=object@meta.data
matrix= data %>% as.matrix()
dm<-DiffusionMap(data=matrix,
censor_val = 30,
censor_range = c(30, 40),
verbose=TRUE
)
plot(dm)
plot(dm)
saveRDS(dm , "/mnt/DOSI/EVLAB/BIOINFO/BIOINFO_PROJECT/ILCs_Ontology/05_Output/03_Trancriptionnal_Trajectories/Destiny/Analysis_Objects/dm.rds")
#plot(dm)
dm_coor=dm@eigenvectors
#Root with automatic choice:
dpt_d <- DPT(dm)
#Root with NK2A as initial
group=factor(metadata[rownames(dm_coor),"seurat_clusters"], levels=c("C1_ILCP" , "C2_Klrd1+" , "C3_LTiP" , "C4_EILP", "C5_Apoe+"))
y=aggregate(dm_coor[,1],by=list(group),median)
y2=y[,2] %>% setNames(y[,1])
y2=sort(y2)
if (names(y2)[1]=="C4_EILP") {
root=which(dm_coor[,1]==max(dm_coor[,1]))
} else {
root=which(dm_coor[,1]==max(dm_coor[,1]))
}
root
dpt_d <- DPT(dm, tips=root)
pt<- dpt_d[[paste0("DPT",root)]]
pt[pt>quantile(pt,0.99,na.rm=TRUE)]=NA
pt[pt<quantile(pt,0.01,na.rm=TRUE)]=NA
df=data.frame("pseudotime"=pt,cluster=group)
rownames(df)=names(dm$DC1)
#for colors
pt_color<- dpt_d[[paste0("DPT",root)]]
pt_color[pt_color>quantile(pt_color,0.99,na.rm=TRUE)]=quantile(pt_color,0.99,na.rm=TRUE)
pt_color[pt_color<quantile(pt_color,0.01,na.rm=TRUE)]=quantile(pt_color,0.01,na.rm=TRUE)
clustering_d=metadata[rownames(dm_coor),"seurat_clusters"] %>%
as.character() %>% setNames(rownames(dm_coor))
# 2D plots with GGPLOT
pt<- dpt_d[[paste0("DPT",root)]]
#Reverse DC1
dm_coor[,"DC1"] = -dm_coor[,"DC1"]
object_d=subset(object,cells=rownames(dm_coor))
object_d[["dm"]]=CreateDimReducObject(dm_coor, key="DC")
object_d$pt=pt
df2=data.frame(dm_coor[,1:3],pseudotime=pt,pseudotime2=pt_color, seurat_clusters = object_d$seurat_clusters )
# DC 1 &2
p1=DimPlot(object_d,reduction="dm", group.by="seurat_clusters", pt.size = 1.4,
cols = col_clust_traj) +  theme_bw() + theme(panel.grid.major = element_blank(),   panel.grid.minor = element_blank())  + ggtitle("")
p2=ggplot(df2, aes( DC1, DC2,col = pseudotime2)) +
geom_point() +  theme_bw() + theme(panel.grid.major = element_blank(),   panel.grid.minor = element_blank()) +
scale_color_gradientn(colours = viridis::plasma(11, alpha=1, begin = 0, end=1, direction = 1))
p1 + p2
p3 = ggplot(df2, aes( DC1, DC2,fill = seurat_clusters)) +
geom_point(shape=21) +  theme_bw() + theme(panel.grid.major = element_blank(),   panel.grid.minor = element_blank()) + scale_fill_manual(values= col_clust_traj)
p4=ggplot(df2, aes( DC1, DC2,fill = pseudotime2)) +
geom_point(shape=21) +  theme_bw() + theme(panel.grid.major = element_blank(),   panel.grid.minor = element_blank()) +
scale_fill_gradientn(colours = viridis::plasma(11, alpha=1, begin = 0, end=1, direction = 1))
p3 + p4
var.features
p1 + p2
p3 = ggplot(df2, aes( DC1, DC2,fill = seurat_clusters)) +
geom_point(shape=21) +  theme_bw() + theme(panel.grid.major = element_blank(),   panel.grid.minor = element_blank()) + scale_fill_manual(values= col_clust_traj)
p4=ggplot(df2, aes( DC1, DC2,fill = pseudotime2)) +
geom_point(shape=21) +  theme_bw() + theme(panel.grid.major = element_blank(),   panel.grid.minor = element_blank()) +
scale_fill_gradientn(colours = viridis::plasma(11, alpha=1, begin = 0, end=1, direction = 1))
p3 + p4
p5 = ggplot(df, aes( pseudotime, cluster,col = cluster)) +
ggbeeswarm::geom_quasirandom( alpha=0.7,
cex=1,
show.legend = FALSE,
groupOnX=FALSE)+ylab("")  +
ggtitle("Pseudotime in Dataset4") + theme_light()+
stat_summary(
aes(group = cluster), fun = median, fun.min = median, fun.max = median,
geom = "crossbar", color = "black", width = 0.7, lwd = 0.2,
# add this bit here to your stat_summary function
position=position_dodge(width=0.75)
) +
scale_color_manual(values=col_clust_traj)
p5
p3 + p4
png(file=paste0(PATH_EXPERIMENT_OUTPUT_DESTINY_FIGURES,"/ClustersandPseudotimes_Normal_NoLTi.png"), width = 50, height = 15,  units = "cm", res=600 )
print(p1 + p2)
dev.off()
png(file=paste0(PATH_EXPERIMENT_OUTPUT_DESTINY_FIGURES,"/ClustersandPseudotimes_WithCircles_No_LTi.png"), width = 50, height = 15,  units = "cm", res=600 )
print(p3 + p4)
dev.off()
png(file=paste0(PATH_EXPERIMENT_OUTPUT_DESTINY_FIGURES,"/Plot_PseudoTime_No_LTi.png"), width = 40, height = 15,  units = "cm", res=600 )
print(p5)
dev.off()
gc()
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/IPH_6501/03_Script/globalParams.R')
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/IPH_6501/03_Script/sampleParams.R')
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/IPH_6501/03_Script/01_GlobalHeterogeneity/00A_Global_Dependencies.R')
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/IPH_6501/03_Script/01_GlobalHeterogeneity/00B_Analysis_Params.R')
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/IPH_6501/03_Script/globalParams.R')
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/IPH_6501/03_Script/01_GlobalHeterogeneity/00A_Global_Dependencies.R')
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/IPH_6501/03_Script/01_GlobalHeterogeneity/00B_Analysis_Params.R')
PATH_EXPERIMENT_REFERENCE_Data
# Declare all the samples names
SAMPLE_ANK = "object_ANKET.RDS"
#Load the data sent by our colaborators
PBMC= readRDS((paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_BM)))
#Load the data sent by our colaborators
PBMC= readRDS((paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_ANK)))
p0 = DimPlot(PBMC, label = TRUE)
p0
PBMC@meta.data
PBMC$Condition_t
table(PBMC$Condition_t)
table(PBMC$Condition)
table(PBMC$replicating)
table(PBMC$new_annotation)
table(PBMC$new_annotation2)
table(PBMC$new_annotation3)
All_Markers = FindAllMarkers(PBMC , only.pos = FINDMARKERS_ONLYPOS, method= FINDMARKERS_METHOD , min.pct =  FINDMARKERS_MINPCT, logfc.threshold = FINDMARKERS_LOGFC_THR , verbose = TRUE)
All_Markers %>%
group_by(cluster) %>%
slice_max(n = FINDMARKERS_SHOWTOP, order_by = avg_log2FC) -> top10
p1 = DotPlot(PBMC, features = unique(top10$gene) , cols = "RdBu") + NoLegend() + theme(axis.text.x = element_text(angle = 90))
p1
table(PBMC$new_annotation)
p0
View(PBMC)
PBMC@active.ident
table(PBMC@active.ident)
table(PBMC@active.ident, PBMC$corrected_annotation)
table(PBMC@active.ident, PBMC$annotation)
table(PBMC@active.ident, PBMC$score)
table(PBMC@active.ident, PBMC$Condition_t)
table(PBMC@active.ident, PBMC$new_annotation)
gc()
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/ILCs_Ontology/03_Script/04_Mapping_Human_Datasets/02_Science_paper/00A_Global_Dependencies.R')
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/ILCs_Ontology/03_Script/04_Mapping_Human_Datasets/02_Science_paper/00B_Analysis_Params.R')
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/ILCs_Ontology/03_Script/globalParams.R')
PATH_EXPERIMENT_REFERENCE_Data
PATH_EXPERIMENT_REFERENCE_Data
anno = read.csv("/mnt/DOSI/EVLAB/BIOINFO/BIOINFO_PROJECT/ILCs_Ontology/01_Reference/Data/Liu_etal/GSE163587_w10_1_anno.csv.gz")
dim(anno)
raw = read.csv("/mnt/DOSI/EVLAB/BIOINFO/BIOINFO_PROJECT/ILCs_Ontology/01_Reference/Data/Liu_etal/GSE163587_w10_1_rawdata.csv.gz")
dim(raw)
table(anno$site)
table(anno$stage)
raw = read.csv("/mnt/DOSI/EVLAB/BIOINFO/BIOINFO_PROJECT/ILCs_Ontology/01_Reference/Data/Liu_etal/GSE163587_w10_1_rawdata.csv.gz", header = TRUE)
help(read.csv)
raw = read.csv("/mnt/DOSI/EVLAB/BIOINFO/BIOINFO_PROJECT/ILCs_Ontology/01_Reference/Data/Liu_etal/GSE163587_w10_1_rawdata.csv.gz", header = TRUE, row.names = 1)
raw[1:5,1:5]
anno[1:5,1:5]
gc()
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/ILCs_Ontology/03_Script/globalParams.R')
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/ILCs_Ontology/03_Script/sampleParams.R')
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/ILCs_Ontology/03_Script/04_Mapping_Human_Datasets/02_Science_paper/00A_Global_Dependencies.R')
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/ILCs_Ontology/03_Script/04_Mapping_Human_Datasets/02_Science_paper/00B_Analysis_Params.R')
PATH_EXPERIMENT_REFERENCE_Data
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/ILCs_Ontology/03_Script/sampleParams.R')
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/ILCs_Ontology/03_Script/sampleParams.R')
paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL)
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/ILCs_Ontology/03_Script/sampleParams.R')
paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas)
Convert(paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas), ".h5seurat")
SAMPLE_FL_Science_YS_Atlas
paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5ad")
FL_YSpaper = LoadH5Seurat(paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5Seurat"))
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/ILCs_Ontology/03_Script/sampleParams.R')
FL_YSpaper = LoadH5Seurat(paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5Seurat"))
paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5ad")
paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5Seurat")
FL_YSpaper = LoadH5Seurat(paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5Seurat"))
Convert(paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5ad"), ".h5seurat", overwrite = TRUE)
FL_YSpaper = LoadH5Seurat(paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5Seurat"))
FL_YSpaper = LoadH5Seurat(paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5seurat"))
Convert(paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5ad"), ".h5Seurat", overwrite = TRUE)
FL_YSpaper = LoadH5Seurat(paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5Seurat"))
paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5seurat")
Convert(paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5ad"), "h5seurat", overwrite = TRUE)
FL_YSpaper = LoadH5Seurat(paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5seurat"))
FL_YSpaper = LoadH5Seurat(paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5seurat"))
FL_YSpaper
FL_YSpaper = LoadH5Seurat(paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5seurat"))
FL_YSpaper = LoadH5Seurat(paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5seurat"), meta.data = FALSE, misc = FALSE)
library(rhdf5)
FL_YSpaper
View(FL_YSpaper)
FL_YSpaper[["mised_meta_value"]] <- h5read("my_obj.h5ad", "/obs/mised_meta_value")
FL_YSpaper
h5ls(paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5ad"))
FL_YSpaper[["mised_meta_value"]] <- h5read(paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5ad"), paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, "/mised_meta_value"))
FL_YSpaper
FL_YSpaper[["mised_meta_value"]] <- h5read(paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5ad"), paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, "/mised_meta_value"))
h5ls(paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5ad"))
library(reticulate)
library(reticulate)
library(anndata)
#Strat 2:
install.packages("anndata")
library(anndata)
data = read_h5ad(paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5ad"))
Y
library(anndata)
data = read_h5ad(paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5ad"))
paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5ad")
data = read_h5ad(paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5ad"))
data = read_h5ad(paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5ad"))
library(anndata)
data = anndata::read_h5ad(paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5ad"))
data = anndata::read_h5ad(paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5ad"))
data = anndata::read_h5ad(paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5ad"))
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/ILCs_Ontology/03_Script/globalParams.R')
gc()
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/ILCs_Ontology/03_Script/sampleParams.R')
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/ILCs_Ontology/03_Script/04_Mapping_Human_Datasets/02_Science_paper/00A_Global_Dependencies.R')
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/ILCs_Ontology/03_Script/04_Mapping_Human_Datasets/02_Science_paper/00B_Analysis_Params.R')
library(anndata)
data = anndata::read_h5ad(paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5ad"))
reticulate::py_discover_config()
data = anndata::read_h5ad(paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5ad"))
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/ILCs_Ontology/03_Script/globalParams.R')
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/ILCs_Ontology/03_Script/sampleParams.R')
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/ILCs_Ontology/03_Script/01_GlobalHeterogeneity/00A_Global_Dependencies.R')
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/ILCs_Ontology/03_Script/01_GlobalHeterogeneity/00B_Analysis_Params.R')
#Load the data sent by our colaborators
load(paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_BM))
p0 = DimPlot(immune.combined, label = TRUE)
p0
#Diagnostic with their granularity
All_Markers = FindAllMarkers(immune.combined , only.pos = FINDMARKERS_ONLYPOS, method= FINDMARKERS_METHOD , min.pct =  FINDMARKERS_MINPCT, logfc.threshold = FINDMARKERS_LOGFC_THR , verbose = TRUE)
All_Markers
p0
immune.combined$seurat_clusters
SAVE_RDS_FILE
SAVE_RDS_FILE = paste0(PATH_EXPERIMENT_OUTPUT_RDSFiles, "/BM.rds")
SAVE_RDS_FILE
#Extract signature:
immune.combined = readRDS("/mnt/DOSI/EVLAB/BIOINFO/BIOINFO_PROJECT/ILCs_Ontology/05_Output/01_GlobalHeterogeneity/DEG/All_Markers.rds")
#Extract signature:
immune.combined = readRDS(SAVE_RDS_FILE)
All_Markers = FindAllMarkers(immune.combined , only.pos = FINDMARKERS_ONLYPOS, method= FINDMARKERS_METHOD , min.pct =  FINDMARKERS_MINPCT, logfc.threshold = FINDMARKERS_LOGFC_THR , verbose = TRUE)
SaveRDS(All_Markers, file= "/mnt/DOSI/EVLAB/BIOINFO/BIOINFO_PROJECT/ILCs_Ontology/05_Output/01_GlobalHeterogeneity/DEG/All_Markers_BM.rds")
saveRDS(All_Markers, file= "/mnt/DOSI/EVLAB/BIOINFO/BIOINFO_PROJECT/ILCs_Ontology/05_Output/01_GlobalHeterogeneity/DEG/All_Markers_BM.rds")
SAVE_RDS_FILE = paste0(PATH_EXPERIMENT_OUTPUT_RDSFiles, "/FL.rds")
immune.combined = readRDS(SAVE_RDS_FILE)
All_Markers = FindAllMarkers(immune.combined , only.pos = FINDMARKERS_ONLYPOS, method= FINDMARKERS_METHOD , min.pct =  FINDMARKERS_MINPCT, logfc.threshold = FINDMARKERS_LOGFC_THR , verbose = TRUE)
saveRDS(All_Markers, file= "/mnt/DOSI/EVLAB/BIOINFO/BIOINFO_PROJECT/ILCs_Ontology/05_Output/01_GlobalHeterogeneity/DEG/All_Markers_FL.rds")
All_Markers
FL_YSpaper = LoadH5Seurat(paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5seurat"), meta.data = FALSE, misc = FALSE) #Load the Seurat Object with No meta data
library(anndata)
data = anndata::read_h5ad(paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5ad"))
h5ls(paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5ad")) #Have a look at the missing MetaData
library(anndata)
library(reticulate)
library(reticulate)
```{python}
# This is the name of the analysis step. Use the same name as the folder
# name of the analysis step
# Example : ANALYSIS_STEP_NAME = "02_GlobalHeterogeneity"
ANALYSIS_STEP_NAME = "00_Building_Seurat_Objects_From_AnnData"
EXPERIMENT_NAME = SUB_ANALYSIS_STEP_NAME
# This is the name of the analysis step. Use the same name as the folder
# name of the analysis step
# Example : ANALYSIS_STEP_NAME = "02_GlobalHeterogeneity"
ANALYSIS_STEP_NAME = "00_Building_Seurat_Objects_From_AnnData"
# This is the literal title of the analysis step. It will be shown at the beginning
# of the HTML report
# Example : LITERAL_TITLE = "Quality Control, normalization and clustering"
LITERAL_TITLE = "Scoring Colonna's data with Meta-NK signatures in different tissues "
# This is the path to the analysis step output folder. It will be automatically
# created at first analysis launch
PATH_ANALYSIS_OUTPUT = file.path( PATH_EXPERIMENT_OUTPUT, ANALYSIS_STEP_NAME)
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/ILCs_Ontology/03_Script/globalParams.R')
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/ILCs_Ontology/03_Script/sampleParams.R')
# This is the name of the analysis step. Use the same name as the folder
# name of the analysis step
# Example : ANALYSIS_STEP_NAME = "02_GlobalHeterogeneity"
ANALYSIS_STEP_NAME = "00_Building_Seurat_Objects_From_AnnData"
# This is the literal title of the analysis step. It will be shown at the beginning
# of the HTML report
# Example : LITERAL_TITLE = "Quality Control, normalization and clustering"
LITERAL_TITLE = "Scoring Colonna's data with Meta-NK signatures in different tissues "
# This is the path to the analysis step output folder. It will be automatically
# created at first analysis launch
PATH_ANALYSIS_OUTPUT = file.path( PATH_EXPERIMENT_OUTPUT, ANALYSIS_STEP_NAME)
PATH_ANALYSIS_OUTPUT_FIGUREPLOTS= file.path(PATH_ANALYSIS_OUTPUT, "FiguresPlots")
R_FUTURE_SUPPORTSMULTICORE_UNSTABLE = FALSE
R_FUTURE_SUPPORTSMULTICORE_UNSTABLE = "quiet"
#Number of genes for scoring
NUMBER_TOP_SCORING = 20
SORT_VLN_PLOT= "decreasing"
SORT_RIDGE_PLOT= "decreasing"
PT_SIZE = 0.6
PT_SIZE_VLN = 0
#Experimental code, still to work on:
DO_LABEL_SAVE = FALSE
DO_MELSEN_Heatmap = FALSE #Do not use this shit
NUMBER_GENES_JACKARD_3pops= 50
NUMBER_GENES_JACKARD_6pops=30
#Analysis params
SUBSET_META_HISTO = FALSE #Whether to subset on some specific meta_histology categories
META_SUBSET = c("Melanoma(MELA)" )
SUBSET_DOWNSAMPLE = FALSE #Whether downsample Tang Data
N_DOWNSAMPLE = 20000 #Number of cells to downasample randomly
#Building the reference
DATA_SPLIT =  "Batch_Cor" #Data to split by for normalization and label transfer procedure #BatchCor = samples for MetaNK and dataset for Tang
REFERENCE_FOR_INTEGRATION =  c("CMVneg1_donorA", "CMVneg2_donorB", "CMVpos2_donorC", "CMVpos3_donorD", "CMVpos4_donorE", "GSM3377678" ,"GSM3738542", "GSM3738543", "GSM5584154"  ,"GSM5584155", "GSM5584156_1", "GSM5584156_2", "GSM5584156_3")
#Defining variable features
#VARIABLE_FEATURES_METHOD = "FORCE_VF1" #FORCE_VF1 = take the intersection of VF1 and rownames as variable features
#"VARIABLE_FEATURE_BASIC" = Take classical 2000 VF within select integrations
VARIABLE_FEATURES_METHOD  = "VARIABLE_FEATURE_INTEGRATION_FEATURES" #=  Select Integration features
VARIABLE_FEATURE_VAR_TO_SPLIT_TO_FIND_FEATURES= "orig.ident"
### Harmony batch Correction
VARIABLE_TANG_FOR_BATCHCOR = "datasets" #Batchcor = orig.ident for Meta_NK and (datasets, etc...) for Tang
Harmo_VARIABLE_BATCH_COR = c("Batch_Cor")
HARMO_USE_REF = TRUE #True or false , WHether to use a reference during Harmony Integration
HARMO_REF_TO_USE  = c("CMVneg1_donorA", "CMVneg2_donorB" ,"CMVpos2_donorC", "CMVpos3_donorD", "CMVpos4_donorE" ,"GSM3377678" ,    "GSM3738542",
"GSM3738543" ,    "GSM5584154" ,    "GSM5584155"  ,   "GSM5584156_1" ,  "GSM5584156_2",   "GSM5584156_3"  )
#Save RDS file?
SAVE_RDS = TRUE
RDS_DIR_OUTPUT = paste0( PATH_ANALYSIS_OUTPUT , "/SUBSET_", SUBSET_META_HISTO,"_Harmo_",Harmo_VARIABLE_BATCH_COR,"_alldata.rds")
NBCORES = 8
#Module scores
NUMBER_TOP_SCORING = 20
#Colors
palette<-c('NK1C'='#F8766D','NKint'='#8494FF',
'NK1A'='#0CB702',
'NK1B'='#00BFC4','NK2'='#ED68ED',
'NK3'='#ABA300')
# Seed for pseudo-random numbers
SEED = 42;
# Scaling parameters (see Seurat::ScaleData())
DATA_CENTER       = TRUE
DATA_SCALE        = TRUE
DATA_VARS_REGRESS = NULL  # c("nCount_RNA") for UMIs (NULL to ignore)
# Maximum number of variable features to keep
VARIABLE_FEATURES_MAXNB   = 2000;  # For analysis (PCA)
VARIABLE_FEATURES_SHOWTOP = 200;   # For table in report
NUMBER_GENES_JACKARD = 50
DO_PRINT_JACKARD= TRUE
DO_PRINT_OVERLAP=TRUE
# Nearest-neighbor graph construction
FINDNEIGHBORS_K = 30
# Cluster identification parameters
FINDCLUSTERS_RESOLUTION     = 0.5;
FINDCLUSTERS_USE_PCA_NBDIMS = 30;  # Number of dimensions to use from PCA results
FINDCLUSTERS_ALGORITHM      = 1;   # 1 = Louvain; 2 = Louvain with multilevel refinement; 3 = SLM; 4 = Leiden
FINDCLUSTERS_DIMS = 1:30
# Parameters for identification of marker annotations for clusters (see Seurat::FindAllMarkers())
FINDMARKERS_METHOD    = "wilcox"  # Method used to identify markers
FINDMARKERS_ONLYPOS   = TRUE     # Only consider overexpressed annotations for markers ? (if FALSE downregulated genes can also be markers)
FINDMARKERS_MINPCT    = 0.2      # Only test genes that are detected in a minimum fraction of cells in either of the two populations. Speed up the function by not testing genes that are very infrequently expressed. Default is '0.1'.
FINDMARKERS_LOGFC_THR = 0.25     # Limit testing to genes which show, on average, at least X-fold difference (log-scale) between the two groups of cells. Default is '0.25'. Increasing logfc.threshold speeds up the function, but can miss weaker signals.
FINDMARKERS_PVAL_THR  = 0.001    # PValue threshold for identification of significative markers
FINDMARKERS_SHOWTOP   = 15      # Number of marker genes to show in report and tables (NULL for all)
FDRCUTOFF = 0.05
source('/mnt/DOSI/PLATEFORMES/BIOINFORMATIQUE/03_WORKSPACE/rebuffet/ILCs_Ontology/03_Script/00_Building_Seurat_Objects_From_AnnData/00A_Global_Dependencies.R')
output_file
PATH_ANALYSIS_OUTPUT
paste0(PATH_EXPERIMENT_REFERENCE_Data,"/",SAMPLE_FL_Science_YS_Atlas, ".h5ad"
)
```{r rmd_dataLoad, warning = FALSE, message= FALSE, fig.dim = c(20,10)}
reticulate::repl_python()
```{r rmd_dataLoad, warning = FALSE, message= FALSE, fig.dim = c(20,10)}
reticulate::repl_python()
